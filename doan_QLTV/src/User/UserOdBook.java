package User;
import Login.LoginForm;
import com.mongodb.BasicDBObject;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.bson.Document;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Acer
 */
public class UserOdBook extends javax.swing.JFrame {
    /**
     * Creates new form BookManagement_GUI
     */
    public UserOdBook(String username) {
        this.loggedInUsername = username;
        initComponents();
        setTitle("Thư viện SGUni");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        comboSearch = new javax.swing.JComboBox<>();
        searchField = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookList = new javax.swing.JTable();
        btnOrder = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        btnBack = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        btnLogOut = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Tìm kiếm");

        jLabel2.setText("Tìm kiếm theo: ");

        comboSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Mã sách", "Tên sách", "Nhà xuất bản", "Thể loại" }));

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search.png"))); // NOI18N
        btnSearch.setText("Tìm kiếm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        bookList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Mã sách", "Tên sách", "Thể loại", "Nhà xuất bản", "Giá sách"
            }
        ));
        jScrollPane1.setViewportView(bookList);

        btnOrder.setText("Đặt sách");
        btnOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderActionPerformed(evt);
            }
        });

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/book.png"))); // NOI18N
        jMenu1.setText("Đặt sách");

        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/previous.png"))); // NOI18N
        btnBack.setText("Quay về");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        jMenu1.add(btnBack);
        jMenu1.add(jSeparator1);

        btnLogOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/log-out.png"))); // NOI18N
        btnLogOut.setText("Đăng xuất");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });
        
        jMenu1.add(btnLogOut);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2))
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(btnSearch)
                .addGap(63, 63, 63))
            .addComponent(jSeparator4)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator7)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(417, 417, 417)
                .addComponent(btnOrder)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(27, 27, 27)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(btnOrder)
                .addGap(18, 18, 18)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        
        setLocationRelativeTo(null);
        
        loadData();
    }// </editor-fold>                        
    
    
    private void loadData() {
        try {
            MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
            MongoDatabase database = mongoClient.getDatabase("QUANLYTHUVIEN");
            MongoCollection<Document> collection = database.getCollection("qlySach");

            FindIterable<Document> documents = collection.find();

            DefaultTableModel model = (DefaultTableModel) bookList.getModel();
            model.setRowCount(0);

            for (Document document : documents) {
                String isbn = document.getString("masach");
                String name = document.getString("tensach");
                String category = document.getString("theloai");
                String publisher = document.getString("nhaxuatban");
                int price = document.getInteger("giasach");
                String state = document.getString("trangthai");
                if("Chưa nhập".equals(state)){
                model.addRow(new Object[]{isbn, name, category, publisher, price, state});
                }
            }

            mongoClient.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {                                        
        UserForm af = new UserForm(loggedInUsername);
        af.setVisible(true);
                
        this.dispose();    
    }
    
    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {                                          
        LoginForm lf = new LoginForm();
        lf.setVisible(true);
                
        this.dispose();
    }
    
    private void btnOrderActionPerformed(java.awt.event.ActionEvent evt) {                                          
        int selectedRow = bookList.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Chọn một sách để đặt.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            String isbn = bookList.getValueAt(selectedRow, 0).toString();
            String name = bookList.getValueAt(selectedRow, 1).toString();
            String category = bookList.getValueAt(selectedRow, 2).toString();
            String publisher = bookList.getValueAt(selectedRow, 3).toString();

            int option = JOptionPane.showConfirmDialog(this, "Bạn có muốn đặt sách '" + name + "' không?", "Xác nhận", JOptionPane.YES_NO_OPTION);

            if (option == JOptionPane.YES_OPTION) {
                String[] userInfo = getUserInfo(loggedInUsername);

                saveOrder(isbn, name, category, publisher, userInfo[0], userInfo[1]);

                JOptionPane.showMessageDialog(this, "Đặt sách thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi đặt sách.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private String[] getUserInfo(String loggedInUsername) {
        String[] userInfo = new String[2];

        try {
            MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
            MongoDatabase database = mongoClient.getDatabase("QUANLYTHUVIEN");
            MongoCollection<Document> collection = database.getCollection("qlyDangNhap");

            BasicDBObject query = new BasicDBObject("tentk", loggedInUsername);
            FindIterable<Document> result = collection.find(query);

            for (Document document : result) {
                userInfo[0] = document.getString("manguoidung");
                userInfo[1] = document.getString("ten");
            }

            mongoClient.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return userInfo;
    }

    private void saveOrder(String isbn, String name, String category, String publisher, String userId, String userName) {
        try {
            MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
            MongoDatabase database = mongoClient.getDatabase("QUANLYTHUVIEN");
            MongoCollection<Document> collection = database.getCollection("qlyDatSach");

            Document orderDocument = new Document();
            orderDocument.append("masach", isbn)
                         .append("tensach", name)
                         .append("theloai", category)
                         .append("nhaxuatban", publisher)
                         .append("manguoidung", userId)
                         .append("ten", userName);

            collection.insertOne(orderDocument);

            mongoClient.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {                                          
       String searchCategory = comboSearch.getSelectedItem().toString();
        String searchText = searchField.getText().trim();

        if (searchCategory.isEmpty()) {
            searchField.setText("");
            loadData();
            return;
        }

        if (searchText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nhập thông tin để tìm kiếm.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
            MongoDatabase database = mongoClient.getDatabase("QUANLYTHUVIEN");
            MongoCollection<Document> collection = database.getCollection("qlySach");

            BasicDBObject query = new BasicDBObject();

            switch (searchCategory) {
                case "Mã sách":
                    query.put("masach", java.util.regex.Pattern.compile(searchText, Pattern.CASE_INSENSITIVE));
                    break;
                case "Tên sách":
                    query.put("tensach", java.util.regex.Pattern.compile(searchText, Pattern.CASE_INSENSITIVE));
                    break;
                case "Nhà xuất bản":
                    query.put("nhaxuatban", java.util.regex.Pattern.compile(searchText, Pattern.CASE_INSENSITIVE));
                    break;
                case "Thể loại":
                    query.put("theloai", java.util.regex.Pattern.compile(searchText, Pattern.CASE_INSENSITIVE));
                    break;
            }

            FindIterable<Document> documents = collection.find(query);

            DefaultTableModel model = (DefaultTableModel) bookList.getModel();
            model.setRowCount(0);

            for (Document document : documents) {
                String isbn = document.getString("masach");
                String name = document.getString("tensach");
                String category = document.getString("theloai");
                String publisher = document.getString("nhaxuatban");
                int price = document.getInteger("giasach");
                String state = document.getString("trangthai");
                if("Chưa nhập".equals(state)){
                model.addRow(new Object[]{isbn, name, category, publisher, price, state});
                }
            }

            mongoClient.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm sách.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        } 
    }                                         

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserOdBook_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserOdBook_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserOdBook_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserOdBook_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserOdBook(loggedInUsername).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTable bookList;
    private javax.swing.JMenuItem btnBack;
    private javax.swing.JMenuItem btnLogOut;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> comboSearch;
    private javax.swing.JButton btnOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTextField searchField;
    private static String loggedInUsername;
    // End of variables declaration                   
}
