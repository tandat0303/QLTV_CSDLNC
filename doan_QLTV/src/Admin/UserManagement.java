/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Admin;

/**
 *
 * @author nguye
 */
import Admin.AdminForm;
import Login.LoginForm;
import com.mongodb.BasicDBObject;
import com.toedter.calendar.JDateChooser;
import java.awt.Dimension;
import java.util.Date;
import javax.swing.JOptionPane;
import com.mongodb.client.*;
import com.mongodb.client.model.Filters;
import java.text.SimpleDateFormat;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.bson.Document;
import org.bson.types.ObjectId;

public class UserManagement extends javax.swing.JFrame {

    /**
     * Creates new form Test
     */
    public UserManagement(String username) {
        this.loggedInUsername = username;
        initComponents();
        setTitle("Thư viện SGUni");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        comboSearch = new javax.swing.JComboBox<>();
        searchField = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        manRadio = new javax.swing.JRadioButton();
        womenRadio = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        dateChooser = new JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        comboPosition = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        ageField = new javax.swing.JTextField();
        usnameField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        passField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        addressField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        emailField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        phoneField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoList = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        btnBack = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        btnLogOut = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        dateChooser.setDateFormatString("dd/MM/yyyy");
        
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Tìm kiếm"));

        jLabel1.setText("Tìm kiếm theo:");

        comboSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Mã Người dùng", "Tên Người dùng", "Số điện thoại", "Vai trò" }));

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search.png"))); // NOI18N
        btnSearch.setText("Tìm kiếm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin người dùng"));

        jLabel2.setText("Mã người dùng:");

        jLabel3.setText("Tên người dùng:");

        jLabel4.setText("Giới tính:");

        manRadio.setText("Nam");

        womenRadio.setText("Nữ");

        jLabel5.setText("Ngày sinh:");

        jLabel6.setText("Vai trò:");

        comboPosition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Quản trị viên", "Độc giả" }));

        jLabel7.setText("Tên tài khoản:");

        jLabel8.setText("Tuổi:");

        jLabel9.setText("Mật khẩu:");

        jLabel10.setText("Địa chỉ:");

        jLabel11.setText("Email:");

        jLabel12.setText("Số điện thoại:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(idField)
                    .addComponent(comboPosition, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(manRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(womenRadio, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE))
                    .addComponent(dateChooser)
                    .addComponent(nameField)
                    .addComponent(ageField))
                .addGap(155, 155, 155)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addressField)
                    .addComponent(passField)
                    .addComponent(emailField)
                    .addComponent(phoneField, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                    .addComponent(usnameField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usnameField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manRadio)
                    .addComponent(womenRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(phoneField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ageField, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addContainerGap())
        );

        infoList.setModel(new NonEditableTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã người dùng", "Tên người dùng", "Vai trò", "Tên tài khoản", "Ngày sinh", "Giới tính", "Tuổi", "Địa chỉ", "Email", "Số điện thoại"
            }
        ));
        
        infoList.getColumnModel().getColumn(4).setCellRenderer(new DateCellRenderer());
        
        jScrollPane1.setViewportView(infoList);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Chức năng"));

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add-reader.png"))); // NOI18N
        btnAdd.setText("Thêm");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete-reader.png"))); // NOI18N
        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/edit-reader.png"))); // NOI18N
        btnEdit.setText("Sửa");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/refresh-button.png"))); // NOI18N
        btnRefresh.setText("Làm mới");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(119, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/admin.png"))); // NOI18N
        jMenu1.setText("Quản lý người dùng");

        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/previous.png"))); // NOI18N
        btnBack.setText("Quay về");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        jMenu1.add(btnBack);
        jMenu1.add(jSeparator1);

        btnLogOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/log-out.png"))); // NOI18N
        btnLogOut.setText("Đăng xuất");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });
        
        jMenu1.add(btnLogOut);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        
        pack();
        
        setLocationRelativeTo(null);
        
        loadData();
    }// </editor-fold>                        

    private static class DateCellRenderer extends DefaultTableCellRenderer {

        private final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        @Override
        protected void setValue(Object value) {
            if (value instanceof java.util.Date) {
                value = sdf.format(value);
            }
            super.setValue(value);
        }
    }
    
    private void loadData() {
        try {
            MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
            MongoDatabase database = mongoClient.getDatabase("QUANLYTHUVIEN");
            MongoCollection<Document> collection = database.getCollection("qlyDangNhap");

            FindIterable<Document> documents = collection.find();

            DefaultTableModel model = (DefaultTableModel) infoList.getModel();
            model.setRowCount(0);

            for (Document document : documents) {
                String id = document.getString("manguoidung");
                String name = document.getString("ten");
                String position = document.getString("vaitro");
                String userName = document.getString("tentk");
                Date dateChooser = document.getDate("ngaysinh");
                String sex = document.getString("gioitinh");
                int age = document.getInteger("tuoi");
                String address = document.getString("diachi");
                String email = document.getString("email");
                String phone = document.getString("sodt");

                model.addRow(new Object[]{id, name, position, userName, dateChooser, sex, age, address, email, phone});
            }

            mongoClient.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private static class NonEditableTableModel extends DefaultTableModel {
        public NonEditableTableModel(Object[][] data, Object[] columnNames) {
            super(data, columnNames);
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    }
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {                                        
        AdminForm af = new AdminForm(loggedInUsername);
        af.setVisible(true);
        
        this.dispose();
    }
    
    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {                                        
        LoginForm lf = new LoginForm();
        lf.setVisible(true);
        
        this.dispose();
    }                                                                                

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if (!idField.getText().isEmpty() || !nameField.getText().isEmpty() || 
            manRadio.isSelected() || womenRadio.isSelected() || dateChooser.getDate() != null ||
            comboPosition.getSelectedIndex() != 0 || !usnameField.getText().isEmpty() || 
            !passField.getText().isEmpty() || !ageField.getText().isEmpty() ||
            !addressField.getText().isEmpty() || !emailField.getText().isEmpty() ||
            !phoneField.getText().isEmpty()) {

            int result = JOptionPane.showConfirmDialog(this, 
                    "Bạn có muốn tiếp tục thêm người dùng không?", 
                    "Xác nhậni", 
                    JOptionPane.YES_NO_OPTION);

            if (result == JOptionPane.YES_OPTION) {
                return;
            }
        }

        refresh();

        JOptionPane.showMessageDialog(this, "Làm mới thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
    }       
    
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if (idField.getText().isEmpty() || nameField.getText().isEmpty() ||
            (!manRadio.isSelected() && !womenRadio.isSelected()) ||
            dateChooser.getDate() == null || comboPosition.getSelectedIndex() == 0 ||
            usnameField.getText().isEmpty() || passField.getText().isEmpty() ||
            passField.getText().isEmpty() || passField.getText().isEmpty() ||
            ageField.getText().isEmpty() || addressField.getText().isEmpty() ||
            emailField.getText().isEmpty() || phoneField.getText().isEmpty()) {

            StringBuilder missingFields = new StringBuilder("Vui lòng nhập đầy đủ thông tin sau để thêm:\n");

            if (idField.getText().isEmpty()) missingFields.append("- Mã người dùng\n");
            if (nameField.getText().isEmpty()) missingFields.append("- Tên người dùng\n");
            if (!manRadio.isSelected() && !womenRadio.isSelected()) missingFields.append("- Giới tính\n");
            if (dateChooser.getDate() == null) missingFields.append("- Ngày sinh\n");
            if (comboPosition.getSelectedIndex() == 0) missingFields.append("- Vai trò\n");
            if (usnameField.getText().isEmpty()) missingFields.append("- Tên tài khoản\n");
            if (passField.getText().isEmpty()) missingFields.append("- Mật khẩu\n");
            if (ageField.getText().isEmpty()) missingFields.append("- Tuổi\n");
            if (addressField.getText().isEmpty()) missingFields.append("- Địa chỉ\n");
            if (emailField.getText().isEmpty()) missingFields.append("- Email\n");
            if (phoneField.getText().isEmpty()) missingFields.append("- Số điện thoại\n");

            JOptionPane.showMessageDialog(this, missingFields.toString(), "Thông báo", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            int age = Integer.parseInt(ageField.getText());

            if (age <= 0) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập lại tuổi!", "Thông báo", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Tuổi phải là một số!", "Thông báo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String phoneStr = phoneField.getText();
        if (!isNumeric(phoneStr)) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập lại số điện thoại!", "Thông báo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String phone = String.valueOf(phoneStr);
        
        String id = idField.getText();
        if (isUserIdExists(id)) {
            JOptionPane.showMessageDialog(this, "Mã người dùng đã tồn tại", "Thông báo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String userName = usnameField.getText();
        if (isUserNameExists(userName)) {
            JOptionPane.showMessageDialog(this, "Tên tài khoản đã tồn tại", "Thông báo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String name = nameField.getText();
        String position = comboPosition.getSelectedItem().toString();
        String password = passField.getText();
        Date dob = dateChooser.getDate();
        String sex = manRadio.isSelected() ? "Nam" : "Nữ";
        int age = Integer.parseInt(ageField.getText());
        String address = addressField.getText();
        String email = emailField.getText();

        Document document = new Document("_id", new ObjectId())
                .append("manguoidung", id)
                .append("ten", name)
                .append("vaitro", position)
                .append("tentk", userName)
                .append("matkhau", password)
                .append("ngaysinh", dob)
                .append("gioitinh", sex)
                .append("tuoi", age)
                .append("diachi", address)
                .append("email", email)
                .append("sodt", phone);

        try {
            MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
            MongoDatabase database = mongoClient.getDatabase("QUANLYTHUVIEN");
            MongoCollection<Document> collection = database.getCollection("qlyDangNhap");

            collection.insertOne(document);

            JOptionPane.showMessageDialog(this, "Thêm người dùng thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);

            refresh();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Thêm người dùng thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private boolean isUserIdExists(String id) {
        try {
            MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
            MongoDatabase database = mongoClient.getDatabase("QUANLYTHUVIEN");
            MongoCollection<Document> collection = database.getCollection("qlyDangNhap");

            long count = collection.countDocuments(Filters.eq("manguoidung", id));

            return count > 0;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
    
    private boolean isUserNameExists(String userName) {
        try {
            MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
            MongoDatabase database = mongoClient.getDatabase("QUANLYTHUVIEN");
            MongoCollection<Document> collection = database.getCollection("qlyDangNhap");

            long count = collection.countDocuments(Filters.eq("tentk", userName));

            return count > 0;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
    
    private boolean isNumeric(String str) {
        try {
            Integer.parseInt(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {                                           
        int selectedRow = infoList.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn người dùng để xóa.", "Thông báo", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int result = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa người dùng này không?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.YES_OPTION) {
            try {
                String id = infoList.getValueAt(selectedRow, 0).toString();

                MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
                MongoDatabase database = mongoClient.getDatabase("QUANLYTHUVIEN");
                MongoCollection<Document> collection = database.getCollection("qlyDangNhap");

                collection.deleteOne(Filters.eq("manguoidung", id));

                JOptionPane.showMessageDialog(this, "Xóa người dùng thành công!");

                refresh();
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Xóa người dùng thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }   
    
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {                                           
        int selectedRow = infoList.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn người dùng để sửa thông tin", "Thông báo", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String idUser = infoList.getValueAt(selectedRow, 0).toString();
        String name = infoList.getValueAt(selectedRow, 1).toString();
        String position = infoList.getValueAt(selectedRow, 2).toString();
        Date dob = (Date) infoList.getValueAt(selectedRow, 4);
        String sex = infoList.getValueAt(selectedRow, 5).toString();
        int age = (int) infoList.getValueAt(selectedRow, 6);
        String address = infoList.getValueAt(selectedRow, 7).toString();
        String email = infoList.getValueAt(selectedRow, 8).toString();
        String phone = infoList.getValueAt(selectedRow, 9).toString();
        String id = getDocumentId(selectedRow);

        if (id == null) {
            JOptionPane.showMessageDialog(this, "Không thể lấy thông tin người dùng từ MongoDB.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        EditAdmin editAdmin = new EditAdmin(this, true, id);
        editAdmin.setUserInfo(id, idUser, name, position, dob, sex, age, address, email, phone);
        editAdmin.setVisible(true);

        loadData();
    }
    
    private String getDocumentId(int selectedRow) {
        try {
            MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
            MongoDatabase database = mongoClient.getDatabase("QUANLYTHUVIEN");
            MongoCollection<Document> collection = database.getCollection("qlyDangNhap");

            String idUser = infoList.getValueAt(selectedRow, 0).toString();

            Document document = collection.find(Filters.eq("manguoidung", idUser)).first();
            String id = document.getObjectId("_id").toString();

            mongoClient.close();

            return id;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {                                           
        String searchCategory = comboSearch.getSelectedItem().toString();
        String searchText = searchField.getText().trim();

        if (searchCategory.isEmpty()) {
            searchField.setText("");
            loadData();
            return;
        }

        if (searchText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nhập thông tin để tìm kiếm.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
            MongoDatabase database = mongoClient.getDatabase("QUANLYTHUVIEN");
            MongoCollection<Document> collection = database.getCollection("qlyDangNhap");

            BasicDBObject query = new BasicDBObject();

            switch (searchCategory) {
                case "Mã Người dùng":
                    query.put("manguoidung", java.util.regex.Pattern.compile(searchText, Pattern.CASE_INSENSITIVE));
                    break;
                case "Tên Người dùng":
                    query.put("ten", java.util.regex.Pattern.compile(searchText, Pattern.CASE_INSENSITIVE));
                    break;
                case "Số điện thoại":
                    query.put("sodt", java.util.regex.Pattern.compile(searchText, Pattern.CASE_INSENSITIVE));
                    break;
                case "Vai trò":
                    query.put("vaitro", java.util.regex.Pattern.compile(searchText, Pattern.CASE_INSENSITIVE));
                    break;
            }

            FindIterable<Document> documents = collection.find(query);

            DefaultTableModel model = (DefaultTableModel) infoList.getModel();
            model.setRowCount(0);

            for (Document document : documents) {
                String id = document.getString("manguoidung");
                String name = document.getString("ten");
                String position = document.getString("vaitro");
                String userName = document.getString("tentk");
                Date dateChooser = document.getDate("ngaysinh");
                String sex = document.getString("gioitinh");
                int age = document.getInteger("tuoi");
                String address = document.getString("diachi");
                String email = document.getString("email");
                String phone = document.getString("sodt");

                model.addRow(new Object[]{id, name, position, userName, dateChooser, sex, age, address, email, phone});
            }

            mongoClient.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm sách.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void refresh() {
        idField.setText("");
        nameField.setText("");
        manRadio.setSelected(false);
        womenRadio.setSelected(false);
        dateChooser.setDate(null);
        comboPosition.setSelectedIndex(0);
        usnameField.setText("");
        passField.setText("");
        ageField.setText("");
        addressField.setText("");
        emailField.setText("");
        phoneField.setText("");

        loadData();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserManagement_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserManagement_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserManagement_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserManagement_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserManagement(loggedInUsername).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTextField addressField;
    private javax.swing.JTextField ageField;
    private javax.swing.JButton btnAdd;
    private javax.swing.JMenuItem btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JMenuItem btnLogOut;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> comboPosition;
    private javax.swing.JComboBox<String> comboSearch;
    private JDateChooser dateChooser;
    private javax.swing.JTextField emailField;
    private javax.swing.JTextField idField;
    private javax.swing.JTable infoList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JRadioButton manRadio;
    private javax.swing.JTextField nameField;
    private javax.swing.JTextField passField;
    private javax.swing.JTextField phoneField;
    private javax.swing.JTextField searchField;
    private javax.swing.JTextField usnameField;
    private javax.swing.JRadioButton womenRadio;
    private static String loggedInUsername;
    // End of variables declaration                   
}
